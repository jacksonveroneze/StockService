name: Pipeline

on:
    pull_request:
        types: [opened, reopened, synchronize]
    push:

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    AUTHORIZATION_CLIENT_ID: ${{ secrets.AUTHORIZATION_CLIENT_ID }}
    AUTHORIZATION_CLIENT_SECRET: ${{ secrets.AUTHORIZATION_CLIENT_SECRET }}

jobs:
    commitlint:
        name: Commit Lint
        runs-on: ubuntu-20.04

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            - uses: wagoid/commitlint-github-action@v2

    install-dotnet:
        name: Install .NET
        runs-on: ubuntu-20.04
        needs: commitlint

        steps:
            - uses: actions/checkout@v2
            - name: Setup .NET
              uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: '5.0.x'

    build:
        name: Build
        runs-on: ubuntu-20.04
        needs: install-dotnet

        steps:
            - uses: actions/checkout@v2

            - name: Restore dependencies
              run: /dotnet restore

            - name: dotnet publish
              run: dotnet publish -c Release

    test:
        name: Test
        runs-on: ubuntu-20.04
        needs: build

        steps:
            - uses: actions/checkout@v2

            - name: Restore dependencies
              run: dotnet restore

            - name: Test
              run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    sonar:
        name: Run Sonar
        runs-on: ubuntu-20.04
        needs: test

        steps:
            - name: Set up JDK 11
              uses: actions/setup-java@v1
              with:
                  java-version: 1.11

            - uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: ''
            - run: git fetch --prune --unshallow

            - name: Cache SonarCloud packages
              uses: actions/cache@v1
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Cache SonarCloud scanner
              id: cache-sonar-scanner
              uses: actions/cache@v1
              with:
                  path: ~/.sonar/scanner
                  key: ${{ runner.os }}-sonar-scanner
                  restore-keys: ${{ runner.os }}-sonar-scanner

            - name: Install SonarCloud scanner
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              run: dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner

            - name: Install project dependencies
              run: dotnet restore

            - name: Build and analyze
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              shell: pwsh
              run: |
                  dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

                  ~/.sonar/scanner/dotnet-sonarscanner begin /k:jacksonveroneze_stock-service /o:jacksonveroneze /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /v:${{ github.run_id }} /d:sonar.cs.opencover.reportsPaths="./tests/JacksonVeroneze.StockService.Domain.Tests/coverage.opencover.xml, ./tests/JacksonVeroneze.StockService.Application.Tests/coverage.opencover.xml" /d:sonar.exclusions="./tests/JacksonVeroneze.StockService.Domain.Tests/**, ./tests/JacksonVeroneze.StockService.Application.Tests/**" /d:sonar.coverage.exclusions="./tests/JacksonVeroneze.StockService.Domain.Tests/**, ./tests/JacksonVeroneze.StockService.Application.Tests/**"
                  
                  dotnet build --configuration Release --no-restore

                  ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
